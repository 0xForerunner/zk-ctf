{
  "transpiled": true,
  "noir_version": "1.0.0-beta.5+0000000000000000000000000000000000000000",
  "name": "CTF",
  "functions": [
    {
      "name": "_respond",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "sender",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "16111331527743337289": {
            "error_kind": "string",
            "string": "Function _respond can only be called internally"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_respond"
      ]
    },
    {
      "name": "_submit_score",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "sender",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "score",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13553912981750111747": {
            "error_kind": "string",
            "string": "Function _submit_score can only be called internally"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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AgADAAAKmCUAABT7ACIBAgQAKgQCBS0LBQMtCAEBJwICBAIACAECAScDAQQBACIBAgItCgIELQ4DBCYlAAAI+AEiAAGASAADLQsDAhwKAgMBHAoDAQAcCgECAS0KAgEmJQAACPgtCwQGCyIABoBEAAckAgAHAAALDicCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAuhIwAACyctCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAALTCUAABT7LgIAB4ADKACABAQABCUAABRbLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEgABQ4qBgUHJAIABwAAC4wlAAAS9C0OCgEtDggCLQ4FAy0OCQQjAAAMFCcCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAABUNLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAUWy4IgAUACQAiCQIKASIACoBFAAstDgULLQ4JAS0OBwIuDIBIAAMtDggEIwAADBQmJQAACPgtCwQFCyIABYBEAAYkAgAGAAAMNycCBwQAPAYHAScCBQQGLQgABi0KAQctCgIILQoDCS0KBAoACAAFACUAABUNLQIAAC0LAQUtCwIGLQsDBy0OBQEtDgYCLQ4HAy4MgEcABAEiAAaASAACLQsCASYqAQABBQLcbieAdhKdPAQCASYlAAAI+CcCCgQLLQgACy0KAQwtCgINLQoDDi0KBA8ACAAKACUAABDrLQIAAC0KDActCg0ILQoOCS8KAAQACicCEAQRLQgAES0KChIACAAQACUAABHxLQIAAC0KEgstChMMLQoUDS0KFQ4tChYPHgIACgUcCgoRBBwKERAAHAoQCgQMKgoPECQCABAAAA1PIwAADS4WCg0QHAoNEQQcChASBAQqEQ4QACoQEhEtChEGIwAADXAWCgsQHAoLEQQcChASBAQqEQwQACoQEhEtChEGIwAADXAAKgoGEQ4qChESJAIAEgAADYclAAAS9AwqCgkGFgoGCRwKBgoEHAoJBgQEKgoHCQQqBggHACoJBwYcChEHABwKDwgAJwIKBBItCAASLgiASgATLgiATAAUAAgACgAlAAATBi0CAAAtChMJBCoICQoAKgcKCBwKDQcAJwIKBBItCAASLgiASgATLgiATQAUAAgACgAlAAATBi0CAAAtChMJ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",
      "debug_symbols": "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",
      "brillig_names": [
        "_submit_score"
      ]
    },
    {
      "name": "challenge",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "9773529118643883723": {
            "error_kind": "string",
            "string": "Challenge already exists for this address"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "tZzbbhw5Dobfxde+0JES8yqDwcBJnIEBwwk8yQKLIO++JEWRZS9K01Y7N6mv2VV/iRJ1otr5efP5/uOPv/96ePry9Z+bD3/8vPn4/PD4+PD3X49fP919f/j6RNafN4H/iTnefIi3dK3jWoJeYVyrfq76Pej9oJ+bft/mZ7z5AHTtZVyRvu98rXJNYXxOKd98QL72cc36ObdxLVGvVa84rlXvq/oZ9DOoTtPPTXW66nTV6foc0n2xMJAh1tubHJpCrAqJfesMZEnkXc5kSZmhKpRpKWZBhVomTAtMC5dWgIs7oCn0NGFaME7QV5QQJpQJ+ooSWbAydIWUJjSFPC2Z76FWKiVPaAo1TqgTUAHmzTAtbVraFOzT0qcgTkGcgqiP18A3IwM9nqlRaiS/Mn8VUSFNCweMAHsxABQ4ZgZMC0fvAH6cXwFJgQN3QFfgMpfEQJZClVk5SAawhe6BkCY0hTgtcVrStCRQyNOS5z1c4QOmMpdwwLTAvIdLWAMB11ilOGxcYzUzNAUuxoBpSdOSpoX7+oBpKfMeLoZAncrc3LURQFNocQIo9Gnh3iXANTaAn6K+00OcAApxWuK0pGnhjjYAFXKZ0BW46gbQK4CqpXOsDgAFoMaFyFAnoALH6oBpkaFKYFpw3sNeMCB7MQAUIr8iMdQJqMBj24CmwAEwYFo4Vgfw41ThyLE6oEzoChwJA6alpQlcHuoyyG0xoE5ABSwT1BIDB5ASl6gycQgpmY2DqAUhenVLTDxUK7EtM3GjNNHrwYgK0kSFJwGlaYs8hjUQYltj4jptXahOSmbj4GjIxMNw51JFDs5BXCM9CrVJ3Ww8DHUuc0S2ZSG2cUkT92ols3Ft9CrENi5p4troTahNymbL9iw37rDxSDSomo2jVDxKHKZSvsRxOqiZjadUZN8S1ymKTaYxITQb1ymyR5knZyxCMKmZjQN+EEc8NiGchBpjRBpktBbIRmaLZuMZhmKFkSOeQkSwG2a3ct0ocuVMrIayzlA8WNEQRExeDPIK9kRmHgogwW7Y3dqbIUbHOrGG4HiwomEUMRCUV3B11eFxFxQrB2YdHg90K4+yE8FweDywGoJbebUwkcUix0IVj6MsycTjyLUjc9dEt3KsT4SJIB4rVsPoVp59J4oY1zqIx7xkIhQr1w6IxxEEu2FxK4/SitwFJlZD8VjxYEXD4XETlFdwrYN4nIIgW5MURzxWbBMbj96RlxpRZsWJYJj9huzW4tbiVmk3RbeC3wvNsPnbpOgDR9EHyr1cqU3CUxEmdmksxeKIhhKeiibWh5sDu2F2a/Z7pbFSE+yGNTmCoTSWYnH0x5o/1pphd2t3seHxwOqIEzFkRxPDGB3tMUzB8WB1sVwcrbxYkqOVDKuLVX+s+mPgJXPncTgv253hvGCPjtURDWUvojgfo41ScnRrjI4slqMgGvJCeaJbs1uzW6XlFZuhtLwiGEqAK/qLZfs3UHzLNFSkKOXlhXyKUcSqoFiBUcJT0a3SC3MXFGtjlAbgBTohF70ERok+Xq2nsQUtUbCMBXKKPGUqtUk8OCh1pSQr6UFmi8kIJjV5dZYda3HshjLyKMLELCOPoltlrFUUsSKIhtKIhStF9pVqBTBs0bD7Y2hiRepdsRlmEyuy0Vd0a82O3RBEjFujjMoe2CdWGZoGRru3Jrt3zHuFm1a2YopDV3DUpCDavRDsXshhVsmYaAYOXUHpfAO739vt3iYv5r0NYTeUnqzo1ubW5lYZxhTdin7vSCYwjtF6oDR35ZrsEuKK1bD4DcWt1a31YEVDcGvze3lHoNj9bTLRDJRIVZR7uRehTDSK1RENZaJR7IbSkxVdbLg5sBkWtxa/V4abWgWboQw3itURDUcLDfTHuj8mE81AdCtOsRyGxwOLYzeMyREMkz+W/LGEhtmtEqkVGGWsVWyGsiRSrI5oCP4YuFhzazMx2UhF3mPkKI2l2A2lhQZKC/UuiIZSsoFSnIEy6XcU7IYSZwOl1nmrQgiG6Fapdd6tEOLEJLWu6Nbo1uhWWX0OlCUnJkaJKEV5RZZsXXB0q/RY3pnmMVYrtok5JEf2gnenOcuEq+hWCQLFapjdmt1a3FrcKkPQQGljRTRsdm+RWYS3yLlIlfDuMReJvmGVNR7vjfPYdPGWOEt6T7G4VUJOEQzBrVKGgTyfRt6NEqJhd6tUKm+sKe0prxgZULFyTUpuL/I+Okt2L/JGOo89lXgx9lQDZSwZWKQPNUEJe7FKeQfK/K+IhqNfDJR+gZJ+ZQXOC2XJ300EQxmgFYth8nuz3yANyxkgyuZGx24oU6giGkp5Fd0q5eU0EGWEoyMYyoyuiBMl/TexGUZTaBKeIHllCU9FNJQoUWyGw6GB/lh1sXqwuhi4GLiYLFE4x0TYDCV2FNFQxgfBseFR7IbR2kKyhoopOLp1eFEFRZdDro9mEZRYVwRDmUKhCVZHNJRtm2IzlFFO0R4bs6niwWpiYzZVNDFM0dEfS/5Y9sdk2AaOdZRhm7GMoQ2Qk/ujkwXBZiivUARDCXDub4TFEQ2LW4tbq1urW8GtzXXbwdoNx5JqIBiiP4b+2OgB7JtkpmKLjMOhgXU6VMZQPPBgRUMZETmNSdgNq1tlMcLZzTLWv4pg2PwVzWpy5J4Uu6F4oWhlGMtmRbt3rKAVTXcsphWHwq9ftzfzRO+v78/393ygdzjio4O/b3fP90/fbz48/Xh8vL35z93jD7npn293T3L9fvdM35Lo/dNnupLgl4fHe6Zft/50OH+UVsdJn6a8fjIBrJcrRFQFWnWjKdSXZUjnCpSUqqoQuVqmAg0dLyTyohA9z0qgs4xoEvCyEGWhAMncAOhnCnXpBi9U1I+a4Exj6UdyP+BUoZ0r1Dbbs3ZvDFqYXN6ezYpAOa2z9rxQoYd6phDD9SHBedQrYyKmq4Mi5neIilWF9m7FoMOpnSZBPiQY3ZzyTqdNAovACn1WJ+F5XSxik1phtipN52GjJihb6sNVTad+4LkEZbyjSgCtoM8KkValaH1K9B7Sjh+BU4DaHvW0k6VFbHZeiYsCpU5PvVgJWC89xtRrgcWQSenS6QTScnKrORtYc2LbCGw6ep69q1MG7rQi29WBzb7+zsD2mkjxNLDzaswsYUYlJVbb+TQaV9XpywHKc5zOYKuwCt3qgvLCpxLLMRNCsjGTDqN2KjRx6lMr9DCDvK7Q1YSeoViFRq8MSq1crlFs6ObDw3ONRYBCs4alMy+vDOwvJRYBSgkcm0+p2x5i4+J1AcWDh0Y6jdASrh56S/ytQ+/Rjxy3xhwPLcosntbEYujkEwKVoGOBeNoeZRFaqbY5/FKiPZxrLCZ1ShvN8CxQyrlGu37tvQjPRpuqKVFD2JKoCUziMPq9RQKi9TOI5xLt6vV7XYyftKuf8Uk5z3C6hF9r4CwGhXg511iEKB0C2ro1HLcS9ZVGXc1qaB2lnCssAhRisBEDzhWWfoBNi+EwEbzWWHcTqwvKGvTTblLx92pQZs7mRTisuCjb/waNPrcClHXpexqt2qxGGcFNDbTZtR9WsG/S8KGH0tVwqrEcRsEmpUS539N2gdXeyAefWuv5cA7XD6PQr96uAr7DdnVdHb6ihnQ+q7TFRJ/kKGI0S8Tzpl1qpGgzJJ0k7Wo00wDc08i2gKM9StzUSNU06m45DquOlvc0ii2f6PRuVyNZnZbadzXANNpmndJB19SoYbMcNVl9HLv+GzUsPipsxmm1fss/u9jTAO8vdCK2q2FtC7BZHz5FUZdrm8O6bUNTi+er496v3q90vHq/crknuLdXaAVNo51PcrhK0yPMUT2FcOz58fJyoE+2WDd9QTBfENu5L6uFaSnTFzpjPI6m+aUGrOojgO2pSzzVWPmSA8y2zaHVc19WUVrL7PnU4c4jHRdhin1ODIiH+Rrzq4z9Ylece57VQSeB5xPUWgTT9IUOSOOmSLcOQyJ1V8TdwQy77lj2J+NiIPsXkTpnmBJCvNodEkl7IpRgtGxBgLArYlm1Etp+SbqLwDvUSdtsnRJtzU3LoV2RYJM3JRrT9e7EknfdsUG+pLDbxClYEx+T2W8sie0xSaRdXydpsdldlyRHE8l5UbFxubEK3fZVKZ6mZFajdAzZtsyhwvk4nVbHor4UoPNdF+Fc00uRVYLJh6R4kAivJfJqg4e2FEgBFyKL5E61znc8dnmbhJ2MwuFg9G2uJBvmaauXNkWaRVlqC2eWSwGwjQRAOV8ayZh1niA/ZO0Snh96r/pdrp6APK7z/i9S8erDqLg6jaKDb8vpIqYtjS5/NaUnWmmvHD1YhntfIyY/Lc11sxwXnc7F1XnUxcdz62R7bZ6r2szXl3S1xGU/8FgdSb3HLzwuPWoM1580xtW51IVHjXG1p2mWb2+tn55CLyVobDFfcjr6gm8Quf7MU36Xrzve4zLmdW3gO0y3NVw93db4DtPt6lzpwul2KXHZdLt05dLpdily4XS7io5gqT86ZKpbEtEPMOIh4/YmCfDBuO+VIluj8F+Pb0lUO/ik0aftSYAPYB33HDmOG3uOZDvcpzl2y5H3CC2wbRj/0fSWRPPz24ZpSwK9OjFtSTSfogvsCKD9EBTrVj1gmLGNaa8E1r+w1Std2BPo3X+92Q/989U8tFJAXzriIZP9eiZrq7xrt1wl/2XiVinsJ4f9xYzcL29M+4kGvsiXvqEMdrbQEfNeGSxZGg4H129SSK4Qr1XIe2XIFpWh5Gvb4vjboTcolO6tuedFadfFQ+y+l+nHDFHNWxIJtySw+lkCwKZEcom2J2EnCYR7jkS0RXcK5788ulQivsqU/Ukf7z49PL/4r/B+sdjzw93Hx3v9+OXH06fDt9//+21+M/8rvW/PXz/df/7xfM9K/v/p0T9/tNZuG/Y/b28ifeqh3vaU+RN/WaiKSpEv+VtKKtz2EP/8xUX7Hw==",
      "brillig_names": [
        "challenge"
      ]
    },
    {
      "name": "end_game",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "end_game"
      ]
    },
    {
      "name": "has_flag",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "length": 20,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_note_internal",
        "get_public_keys_and_partial_address",
        "decompose_hint",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "notify_created_note_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "initialize",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "start",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          },
          {
            "name": "end",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          },
          {
            "name": "join_fee",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "challenge_fee",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "slash_fee",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "deposit_size",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "initialize"
      ]
    },
    {
      "name": "join",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "want_flag",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          },
          {
            "name": "block_number",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "2429784973622283587": {
            "error_kind": "string",
            "string": "Can only emit a note log for an existing note."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "length": 20,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "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nvOvxTznXzv7OWvKnH8dhjkwnPOvyzznX495zr8+Ax6c828Q5l+bvdqCtdk1mO3UIcx26obMdupGzHbqUGY7dRizneoy26lhZjs1wmynRpnt1DJmO7Wc2U6tYLZTK5nt1CpmO7Wa2U7dmNlO3YTZTt2U2U7djNlO3ZzZTt2C2U4dzmynbslsp27FbKduzWynbsNsp27LbKeOYLZTt2O2U7dntlN3MGCnXmOBnVrEbKf+j9lO3ZHZTt2J2U7dmdlO3YXZTt2V2U7djdlO3Z3ZTt2D2U7dk9lO3YvZTt2b2U7dh9lO3ZfZTt2P2U7dn9lOPYDZTj2Q2U49iNlOPZjZTj2E2U49lNlOPYzZTq1htlNrme3UOmY7tZ7ZTm1gtlMbme3Ukcx26uEG7NRrLbBTi5nt1COY7dRRzHbqkcx26mhmO/UoZjt1DLOdOpbZTh3HbKcezWynjme2U49htlMnMNupxzLbqROZ7dTjmO3UScx26mRmO3UKs506ldlOncZspx7PbKeewGynTme2U2PMduqJzHbqScx26snMdmoTs516CrOdOoPZTp1pwE69zgI7tQuznTqL2U6dzWynzmG2U+cy26nzmO3UU5nt1PnMduoCZjt1IbOduojZTl3MbKcuYbZTlzLbqcuY7dTTmO3U5cx26unMduoZzHbqCmY7dSWznXoms516FrOdejaznXoOs516LrOdeh6znXo+s516AbOdeiGznXoRs516sQE79XoL7NSuzHbqJcx26qXMduplzHbq5cx26hXMduqVzHbqVcx26v3MduoDzHbqg8x26kPMdurDzHbqI8x26qPMdupjzHbq48x26hPMdur/MdupTzLbqU8x26lPM9upzzDbqc8y26nPMdupzzPbqS8w26kvMtupLzHbqS8z26mvMNuprxqwU2+wwE7txmynvsZsp77ObKe+wWynvslsp77FbKe+zWynvsNsp77LbKe+x2ynvs9sp37AbKd+yGynfsRsp37MbKd+wmynfspsp37GbKd+zmynfsFsp37JbKd+xWynfs1sp37DbKd+y2ynfsdsp37PbKf+wGyn/shsp/7EbKf+zGyn/mLATr3RAju1O7Od+iuznfobs536O7Od+geznfons536F7Od+jeznepEeO3UUITXTm0XSdveMrJTcyI+2m8GdmquH7wM7NQ8f3i+7dT2fvF8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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "random",
        "check_nullifier_exists",
        "notify_created_nullifier_oracle_wrapper",
        "notify_created_note_oracle_wrapper",
        "get_note_internal",
        "get_public_keys_and_partial_address",
        "decompose_hint",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "get_note_internal",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "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\n5iNYa21VdtY3uxBEsskiA7JJ/wR5mH1uGbJH"
    },
    {
      "name": "nothing",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBEJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAAPyUAAABAKAIAAQSARCcCAgQAOw4AAgABJiUAAABGJigAgAQEeAANAAAAgASAAyQAgAMAAABuKgEAAQX3ofOvpa3UyjwEAgEm",
      "debug_symbols": "XY7BCoRACIbfxfMcCvayvUpE2GQxIM5gM8ESvfs6sUHsRf391N8DZprKOgZZ4gZdf8CkgTmsI0ePOUSx7nE6uOWYlcha8OC2lVBJMnRSmB3syOUa2hLKlTOq0cYByWzZDi6BqVbnYAJ90H/HHTXgxPSTSxH/oPmTbnJ/nDR6motSvVQZNDW0Fvv25dr3cFa3Lw==",
      "brillig_names": [
        "nothing"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6778094227820479499": {
            "error_kind": "string",
            "string": "You are not the challenger for this address"
          },
          "9773529118643883723": {
            "error_kind": "string",
            "string": "Challenge already exists for this address"
          },
          "13553912981750111747": {
            "error_kind": "string",
            "string": "Function _submit_score can only be called internally"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "16111331527743337289": {
            "error_kind": "string",
            "string": "Function _respond can only be called internally"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "respond",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "challenger",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2429784973622283587": {
            "error_kind": "string",
            "string": "Can only emit a note log for an existing note."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "length": 20,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_note_internal",
        "get_public_keys_and_partial_address",
        "decompose_hint",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "notify_created_note_oracle_wrapper",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "get_note_internal",
        "random",
        "check_nullifier_exists",
        "notify_created_nullifier_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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\n0wjG1j0HkTruZrSFZmQJ4zJievrMBCtdWDUY"
    },
    {
      "name": "slash",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6778094227820479499": {
            "error_kind": "string",
            "string": "You are not the challenger for this address"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBIJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAARSUAAABiKAIAAQSASCcCAgQAOw4AAgABKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAACDScCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHABAnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAjYtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAI2LQIAAC0LBgELIgABgEQAByQCAAcAAAGeJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA2QtAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB7yUAAAR3LwoAAwABHgIAAgEKKgECAyQCAAMAAAIMJQAABIkmKACABAR4AA0AAACABIADJACAAwAAAjUqAQABBfeh86+lrdTKPAQCASYlAAACDS0LBAYLIgAGgEQAByQCAAcAAAJYJwIIBAA8BggBLQsDBgsiAAaAQwAHJAIABwAAAvAjAAACcS0LAwYtCwEHLQsCCC0LBAkNIgAGgEMACicCCwEBJAIACgAAApslAAAEmy4CAAeAAygAgAQEAAQlAAAErS4IgAUACgAiCgILACoLBgwtDgUMASIABoBGAAUOKgYFByQCAAcAAALbJQAABTstDgoBLQ4IAi0OBQMtDgkEIwAAA2MnAgYEBy0IAActCgEILQoCCS0KAwotCgQLAAgABgAlAAADZC0CAAAtCwEGLQsCBy0LBAguAgAGgAMoAIAEBAAEJQAABK0uCIAFAAkAIgkCCgEiAAqARQALLQ4FCy0OCQEtDgcCLgyARgADLQ4IBCMAAANjJiUAAAINLgiARQAFIwAAA3QNIgAFgEMABiQCAAYAAAPkIwAAA4ktCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAAA/ojAAAEZi0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAABK0uCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAEZgEiAAWARgAGLQoGBSMAAAN0KgEAAQUC3G4ngHYSnTwEAgEmKgEAAQVeEKDJz12ECzwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAEyCMAAATTLgCAA4AFIwAABTouAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAFJi4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAE9SgBgAUEAAEDAIAGAAKABiMAAAU6JioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "tZjRais5DIbfJde9sGRLts6rHEpJ2/QQCGnJaReW0ndfyZacZmEGzix70/+zx/5HtjWaaT53z4fHj18Px/PL6+/dj5+fu8fL8XQ6/no4vT7t34+vZ+393CX7AynvftQ71TYU0LUORW+jt7O3Mw8tyZVcZSgVV/VtqlWGtuzq/eJtGW1M2bUOBXDloZhcyXX4Yi6u6sOqBV3rUAJXGsrJtbj6vJpdZWjzdvProuPFVLrmVFzbUNu/rjzU4u3q49DH5ezq7eLzLF5Ti7crufr92Oexj6s+rvr9mrebzgMw0ImAClIHlEQOkAI0OMgG4oA5oDpkCKCAGFxieokeiulk04sCU4CN0cwotTg0dJAUoINRA6OkN0Uy0OWh7j9ZPgwQB9sBrAY2S3OA7Mw6CATwAE4pQO+OulFsiZSTgTjY0QyoDgUCYoyldwfGABusG86WQR1aCiAHi2cAD6gJAmyMLrlCDmgOyA52BANisB1BhxKzyOLJBtWBIYACxKGH2iEGt5jeokdiusR08enNntVcDMTBsr4DQkB1sMLRwSrGAN/DVpoDYUD0NBujCSB9f9hAHPpGdWgOVqssE8Ru2iFDADuU6CnRQ9FD0cPRw+ETOSY9xzqIQ0+2DjFYYnA/ZbLiammXe5ntwXayaC1spRqUZ58FPKjvV+tEQTT7eiJKJwmyGuE0nWsO6mk5iIL6IQ+K+0KCSTRJgmL3ob8pBvVE5a+vu128aB7eL4eDvWe+vXn0ffS2vxzO77sf54/T6W731/700Qf9ftufu77vL3pVz/9wflZVw5fj6WD0dXednZantgLNZzetU9OAbh1g2UFfcMUdQOvjdACiGwtcsSB2B0w4DTK0G4O8bFBrEXeoVXhaYLtdRlm2yITuUOCbQbo1oGUDBIFYBSZZtOBlC8JYBeW0yUCqGzDQpkVgixAwfzuLP7GoME+zriwD0v/rAczxXADXts1DC394VMFtHlqIw0ML77LHikWZp6Kfi7z4iMHKsbC+QeMRQc7TQ24fMljJLn1Bzofsup/AZVOxobxYbNrKVuj3c2wF1LQYBcjKOlqOzKiNYHrwbRiY1rZiPqqVuS1awOpKZCYXEPKSydqGEsWRNOLF6o0rpZP0NRdFJ7XllZS1KIBmFN+e1j9ZR67TocLSOtaesoRRv/Vlvlz71ixgpoWeTdtmwTMKaNuiyLOGK26LgjBdy0XdZsHXitNk20KudU//mdtmUeanRaZNC6klDqQW3mIgs94IbVqEpDhPwW0RzJzSj+r/uIR/G9xrc/90vNz84PFlVpfj/vF08ObLx/np29X3v9/iSvxg8nZ5fTo8f1wO5nT91UT//ET9skfie/to1qZ+nd/p57E1wa5S1aty/2XB/AM=",
      "brillig_names": [
        "slash"
      ]
    },
    {
      "name": "submit_score",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "length": 20,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_note_internal",
        "get_public_keys_and_partial_address",
        "decompose_hint",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "notify_created_note_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert"
      ],
      "verification_key": "AAAAAAAEAAAAAAAAAAAAEgAAAAAAAAAQAAAAAAAAVgkAAAAA//////////8ADM/N9hD7y6oLVvUj\nOc4XxAF5uY5dVjXRB5qGZ7SsOkslLtmUF1fR+HhaRcCvtdmKC6J5uN98/Sldmn3BUzXnUwUlXu0y\n/Sx/x7z62CGz8CPtOyDDE1INgEnOvwNg8qLVGWw+1rpbgP9qN+kPCLHdwEao8Kc21yNHq0YUByop\nicQCHpsbzN3LbMm++YJZlTfQuUk67gQK0hSCkHIrlw0LvCkdXg3Od+8dVXpm/kLL7eevCNTZh5DJ\nwFbyyhBoi4F+EWDag7aXK1eLpWgSMVAL8NpaLYVuJRKz00wy4Z7148sOdc6lyY8Ka1c+KladYC5D\njrm5D+TtOrqF6MLrc/AuexOITWZYKv/1Ladg1QT7Y5Oyc0HFVmM4p8OWJ5C4QORpIFpWuFRmssXG\nNt1rxyUaUo1sZFZGnc/2B5m6QiKYXA0HC1lB7FK5bMUsCf/8qqEnth1qqaGFVex/S2F+HNQmXCNm\nMz/TRd5m5MlnpBO5SBhZd69qE3fCFvfeMzFwa6kcJ34e3MIBh/bZnQqcjCd6Eo8n4+S1X0QwM2Q7\nBxTO32ERhG3XjR3FaaW5IHNUc4FjfZjumN7m5SaIFHQ/qD0KTCmMMxH8kXD5LelAsEKquZDVPGo7\nJjOc2mtz35IIMUFZB7BfQIphKEclkBa5IErkvzdTfrGWsFwdmPpRAWqbrLsIsBPe7P6NL7ygNS/e\nX1FosF26s4UETa33EHX3sKFqixvCOCrrHvJIIUsN/xNBcDhUGtn9QEcnvDO8Lf5cOuq9Hd6dnuIY\nmWuU0nmnrISdXoYULoIx3j1wBzrMykGB7kYkBO8d4M4BO9nG4WOEUkyRXcKfVbzHEOfRbaAA6Fj5\nLhmz7hM37OYMZEaDHOA0ls4ypkWhz4tfCGNY/9jEfYwFJnnwhPJ7oSVWC6jwqzoIu2mEI4Ktt7Eb\naGmvMSBwJ7ARRPkkuRVzu5l42nf5CMf6LO0T/Y1+n3qNoK6J5qowYwFm5l0Nm/6f69sf3AZjYN/o\nQO8ynvkdG6P6slyKuop0DMc3I+EHY/JzeFnuuKLJXDKjS/GHbPgmVClzSL4Xu5QnCqeEbT9iYKrB\nzH2q1Wy231o5zaG6ALgavgmslcrWdCnTYGi3b+wdOhp6VBTLpkwOsBpbTGDSXbJGa30yxX9eJCxX\nAmdEdQAIP50kgMTeoEKVeww5li7Mhp4wNbD9sxwhCtKk1NEAifw6Z53FSrR2ILZft0W56E1y7JC5\n8olx3yx1i2SRWJm84/JO4dsqvW6bDpXOvKllZ1tOTIZx8p9QF3Hc+6AMWpe+NNKvTASyJcJ73TVf\n50W3g+J9I3L4SmYIA99IXePSo8DIv+S9AlwlXZTiI+FtSQbJnybghCdnaxFbgMa4dEe/bEAYeRBU\n+G24iylyFP8qbjsvSVO96fSZILVmISKTmg3lvqe1NgfqoWjSL0qAGBY1C1FVU56K8ZEGF3CJ60zi\nd55AV6wsjam/7sDHYr7BffptDQeq0WjxdRdZoUujez7r/PVAwmF9gMI7yPSqVi6hyyh1p9654uKt\nKbsYJOk889M0XnhMVVkfR6ddcxcFAHM97D/d5Or/gYQRK7o0W/OB/3OUZRHV1I4wmfM65GrKh0e4\njrFXenqiqg4r/piibGWxcRocPVgwfwF/P67SxcKZawVg4P1qr/fwAJlOsBPx5MFU0mSAdDOI0yvu\nF6Gyct0KdSHztna6MGcNoiD+ONKRiyVQQOgpXixRFi0QnRHEBbsmI5JTXjZusCuk+ZDPVmgI110w\nMo/jFsdkSw9OE4JGxI+otDjmAUA7GjqU6fcwzqq760RDnnFFu3Dk+zKn8lUtWt9iruQgYjAbVPQD\nPeKExFK6y+JODcXO5pGps3xKOmZ6vo9Mw3BL6QrcicSNdbVxY29bvrSoBvb0WWICMBtq5OsOu+rd\nIDNABm8oE1dI8RljHD/gf6nXAANOPidFTvmStL+EuXuqdHEuJXg1Ud9QwATsfNH03Ys7ZKZvKsSX\nm2XlZWjFoxsU7Rj3bPDO7MtHmN50GuibZOglj4RHfBtiVlpVm6e7OIMuLSmftoZ40BULzFsW3IJS\nNT1D+nDpkjnBwcZ+JxoO6sUV06xaGZq7dJM6TvyYxZsoFO3nzSfa7QDDPBKGC8SwRi041tS6Hkdj\np07NsRyh80aWgMJw5VFRU0RZL1kYj6dlEts56JKCazJhDuCCUeAF/OkXwNXcoBlHfFL2B1MythIA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAACGn9XijT8CUx6yZjDj5j8j31+UR5tj9/s5efb4POwE4EAsGGJmKAacaE2UeDs3fmR7o4O\nSSP4eNv0J8Vk2mbl3gDENyb3W2/aDeIs4ODfq2vMegX/lalrKJQkxfczZw2WL5tuC04sAZaN5cMk\ngqp9HQoJ1xeOyTuteFj5bmTwtI0dWKphxkrVIgQ9ecSAIhnlW6GXUa3+bDYyTT+2wtoJiS18GKk8\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "sync_private_state",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "sync_private_state"
      ]
    },
    {
      "name": "tally",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "length": 20,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_note_internal",
        "get_public_keys_and_partial_address",
        "decompose_hint",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "notify_created_note_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "winner",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgEEACcCAgQAHwoAAQACgEUlAAAARSUAAABULgIAAYBFKAIAAgSARScCAwQBOw4AAwACKACAQwQAAygAgEQEAAEmJQAAAo4tCAEBAAABAgEnAgIAAC0OAgEeAgADBRwKAwUEHAoFBAAcCgQDBCcCBAADLwoABAAFHAoFBgQcCgYEABwKBAUEDCoFAwQkAgAEAAAAqyMAAAI2HgIABAUcCgQGBBwKBgUAHAoFBAQtCAEFJwIGBAQACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBy0IAQIAAAECAS0OBQInAgUEACcCBgAXLQoFAyMAAAERDSIAA4BDAAUkAgAFAAACPyMAAAEmLQsCAwEiAAOARAAFLQsFAicCBQQCACoDBQctCwcGASIAA4BDAAgtCwgHLQgBAycCCAQEAAgBCAEnAwMEAQAiAwIILQoICS0OAgkAIgkCCS0OBgkAIgkCCS0OBwktCwMGACIGAgYtDgYDJwIHBAgtCAAILQoDCS4IgEQACgAIAAcAJQAAArctAgAALQoJBi0LAwcAIgcCBy0OBwMnAggECS0IAAktCgMKLQoFCwAIAAgAJQAAArctAgAALQoKBwEiAAaARAAFLQsFAwEiAAeARAAGLQsGBRwKAgcEHAoHBgAcCgYCBAwqBAIGFgoGAhwKBgQAHAoCBgAEKgQDAgQqBgUDACoCAwQtDgQBIwAAAjYtCwECLQoCASYcCgMFAAAqBgUHLwoABwAFLQsCBy4CAAeAAygAgAQEAAQlAAADPi4IgAUACAAiCAIJACoJAwotDgUKLQ4IAgEiAAOARAAFLQoFAyMAAAERKACABAR4AA0AAACABIADJACAAwAAArYqAQABBfeh86+lrdTKPAQCASYlAAACjgEiAAKARAADDioCAwQkAgAEAAAC1iUAAAPMDSiAQwADAAQnAgMBAAoqBAMFJAIABQAAAvUlAAAD3g0iAAKAQwADJwIEAQEkAgADAAADDyUAAAPwACIBAgQAKgQCBS0LBQMtCAEBJwICBAIACAECAScDAQQBACIBAgItCgIELQ4DBCYuAYADgAYLAIAGAAKAByQAgAcAAANZIwAAA2QuAIADgAUjAAADyy4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAO3LgGACoAILgSACIALAQCACgACgAoBAIALAAKACyMAAAOGKAGABQQAAQMAgAYAAoAGIwAAA8smKgEAAQVFp8pxGUHkFTwEAgEmKgEAAQX0LuWEu/Qh0TwEAgEmKgEAAQXFa8RaDhAAAjwEAgEm",
      "debug_symbols": "tZjRbtswDEX/xc95EClKovIrQ1GkbToECNIiSwYMRf59pC3KyQAJmbO9VMeMdS3Kl5Lqr+Ft+3L+/rw7vH/8GNbfvoaX426/331/3n+8bk67j4NEvwanfzgPa1gN2U8Njw04X9o0rElawGEdtE1Ti+Ua5Rr0Ro8GquAFyBtYJGhE1RIIsEIUyAIMBhbJEkHtlcME6JyBRcAiUCO5AHoDLqAjnCAVIDCw7sEEk3aXoWImgaAgOt6tBu9iAX36BKEAWgSpgD50Au0l8+PJGYQCwSLBItEikQy4gA5sglSA0UAfIYP32RkEA5kWL+mQIwMuoG92Aovo1E1gEW/3jFkojFmMEAz0ETJRFMiAC0Q0iAXUABNYhJ2BdhdvUEYDuYckwaCDn0CUCQXAG1hEB0+kwAV80Qn63kcgi5BFgkWC+lmGEXSoIyRJkBR0hBQVNKI3q0UpKYTJJNGBARfQEU6QCyAZWMTbPaMzBZJanbICFxgzVUAwkBEGsVbyZJALkEU0rwm0bmXqUgwFkjPgAiyPCKjABbJFsnYXI7EmOEEsABYBi6BFUJ/lL5fVYMvO8+m43eqqc7UOyer0uTluD6dhfTjv96vh52Z/Hm/68bk5jO1pc5RfJY/t4U1aEXzf7bdKl9Xc27W7RnFu6R0pxCoQ/kKBq0JwTQXsKHit0klBir8qxFsF31bgxKbA7LClcG8WEJbMQ9CiKgrRtRRiW8FHtfioIMsaVwWI/kYitSVk28lFAjDnWSLfSnBbQtxufkocoDWXuaMgBWwKMXJLATqTCUDZWyIQMLZEuongnEhsKgD2hpFDnU6Y50I2rfttgTzbAhcZa7ZmBG4p6Jrcdhb46ix/7azbPCA+XKWQHi7TuzOh1M6kqxFS1Ui5qYGdl0IRzOMUidoa8HClYcegiXItteDcIgmpriqBaZFEBKgFD20JeLhYsbd8YjYJsSo1ixV766dLddlxPFvDhz80OusOV2ewp7ZCZwGN4GqlxbZCN48INY/k2hpdi9e5IDluNS3u8f9qyPaHlksMV+9Etun7NdhKXv7H4mUaKdS9NTG1NToeRQc2DnQ0r4AoO8ONRu/dxlqwMjWhrdHNJdthBaTy2rnkx3Mh959zmZdRYIrNXO7eEnJs+pQ6h1DIruaS6eqwAP4vVtI6Djk6LVyMCR+WuOsAR+kfHOB65pAzQn2x10Ub/CIJzIskcphfa4wLJXCWSMskyM/m+iORJ7ncvO6ONx+xLip23G1e9tty+X4+vF79evr1ab/YR7DP48fr9u183KrS/CVM/nyT8lxJeT3ppy+9lIoEn/QS9JJ5Jf5/uuhgfgM=",
      "brillig_names": [
        "winner"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "ValueNote"
            },
            {
              "fields": [
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000002"
            },
            {
              "kind": "string",
              "value": "TallyNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "tally",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000001"
            },
            {
              "kind": "string",
              "value": "CaptureNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "capture_block",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "CTF"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "start",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "end",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "join_fee",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "challenge_fee",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "slash_fee",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000009"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "deposit_size",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000b"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "is_init",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000d"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "num_players",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000e"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "deposits",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000f"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "challenger",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000010"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "challenge_block",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000011"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "final_score",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000012"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "game_over",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000013"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "winner",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000017"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "winner_score",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001b"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "first_capture",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001f"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "capture_note",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000023"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "tally_note",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000024"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "events": [
        {
          "fields": [
            {
              "name": "challenger",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "defender",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "block",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "CTF::ChallengeEvent"
        }
      ],
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "sender",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "CTF::_respond_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CTF::_respond_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "sender",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "score",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "CTF::_submit_score_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CTF::_submit_score_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "CTF::challenge_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CTF::challenge_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "CTF::end_game_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CTF::end_game_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "CTF::has_flag_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "CTF::has_flag_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "start",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  },
                  {
                    "name": "end",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  },
                  {
                    "name": "join_fee",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "challenge_fee",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "slash_fee",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "deposit_size",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "CTF::initialize_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CTF::initialize_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "want_flag",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "block_number",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "CTF::join_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CTF::join_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "CTF::nothing_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CTF::nothing_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "challenger",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "CTF::respond_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CTF::respond_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "CTF::slash_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CTF::slash_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "CTF::submit_score_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CTF::submit_score_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "CTF::sync_private_state_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CTF::sync_private_state_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "CTF::tally_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            }
          ],
          "kind": "struct",
          "path": "CTF::tally_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "CTF::winner_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "CTF::winner_abi"
        }
      ]
    }
  },
  "file_map": {
    "100": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "101": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "102": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "104": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::fetch_tagged_logs},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `fetchTaggedLogs` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    fetch_tagged_logs(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "105": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "106": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "107": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "114": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/logs/note.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    messages::{\n        encoding::encode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        logs::utils::prefix_with_tag,\n        msg_type::{PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID},\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n};\nuse protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_MSG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    msg_type: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    // A note message's content is the storage slot followed by the packed note representation\n    let mut msg_content: [Field; N + 1] = std::mem::zeroed();\n    msg_content[0] = storage_slot;\n    for i in 0..packed_note.len() {\n        msg_content[1 + i] = packed_note[i];\n    }\n\n    // Notes use the note type id for metadata\n    let plaintext = encode_message(msg_type, Note::get_id() as u64, msg_content);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\npub unconstrained fn compute_note_log_unconstrained<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_note_log(note, storage_slot, recipient, sender)\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        // Regardless of the original note size `N, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_raw_note_log(encrypted_log, length, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log =\n            unsafe { compute_note_log_unconstrained(note, storage_slot, recipient, sender) };\n        // Regardless of the original note size `N`, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_raw_note_log(encrypted_log, length, note_hash_counter);\n    }\n}\n"
    },
    "115": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/logs/utils.nr",
      "source": "use crate::{\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    prelude::AztecAddress,\n};\n\npub(crate) fn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "120": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n"
    },
    "122": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
      "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
    },
    "125": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/note/note_getter.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{\n        note_getter_options::{\n            NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder,\n        },\n        note_interface::{NoteHash, NoteType},\n        note_viewer_options::NoteViewerOptions,\n        retrieved_note::RetrievedNote,\n        utils::compute_note_hash_for_read_request,\n    },\n    oracle,\n    utils::{array, comparison::compare},\n};\n\nuse protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, traits::{Packable, ToField}};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
    },
    "128": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
    },
    "130": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/note/retrieved_note.nr",
      "source": "use crate::{note::note_metadata::NoteMetadata, utils::array::subarray::subarray};\nuse protocol_types::{\n    address::AztecAddress,\n    traits::{FromField, Packable, Serialize, ToField},\n    utils::arrays::array_concat,\n};\n\n// Number of fields a RetrievedNote adds to the packed or serialized representation of a note\n// +1 for the contract address\n// +2 for the note metadata\npub global RETRIEVED_NOTE_OVERHEAD: u32 = 1 + 2;\n\n/// A container of a note and the metadata required to prove its existence, regardless of whether the note is\n/// pending (created in the current transaction) or settled (created in a previous transaction).\n#[derive(Eq)]\npub struct RetrievedNote<NOTE> {\n    pub note: NOTE,\n    pub contract_address: AztecAddress,\n    pub metadata: NoteMetadata,\n}\n\nimpl<NOTE, let N: u32> Serialize<N + RETRIEVED_NOTE_OVERHEAD> for RetrievedNote<NOTE>\nwhere\n    NOTE: Serialize<N>,\n{\n    fn serialize(self) -> [Field; N + RETRIEVED_NOTE_OVERHEAD] {\n        array_concat(\n            array_concat(self.note.serialize(), [self.contract_address.to_field()]),\n            self.metadata.serialize(),\n        )\n    }\n}\n\n// This function is not part of the Packable trait implementation because in the case of the retrieved note, the pack\n// functionality resides in TS (oracle.ts and txe_service.ts).\npub fn unpack_retrieved_note<NOTE, let N: u32>(\n    packed_retrieved_note: [Field; N + RETRIEVED_NOTE_OVERHEAD],\n) -> RetrievedNote<NOTE>\nwhere\n    NOTE: Packable<N>,\n{\n    let contract_address = AztecAddress::from_field(packed_retrieved_note[0]);\n    let nonce = packed_retrieved_note[1];\n    let nonzero_note_hash_counter = packed_retrieved_note[2] as bool;\n\n    let packed_note = subarray(packed_retrieved_note, RETRIEVED_NOTE_OVERHEAD);\n    let note = NOTE::unpack(packed_note);\n\n    RetrievedNote {\n        note,\n        contract_address,\n        metadata: NoteMetadata::from_raw_data(nonzero_note_hash_counter, nonce),\n    }\n}\n"
    },
    "131": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "135": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "136": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "137": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "138": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "143": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n"
    },
    "144": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "145": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "146": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
      "source": "use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    length: u32,\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, length, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    length: u32,\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n"
    },
    "147": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",
      "source": "use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn fetch_tagged_logs(pending_tagged_log_array_base_slot: Field) {\n    fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(fetchTaggedLogs)]\nunconstrained fn fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    // The log fields length is PUBLIC_LOG_SIZE_IN_FIELDS. + 1 because the contract address is prepended to the content.\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_SIZE_IN_FIELDS + 1>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "149": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::note::{\n    note_interface::NoteType,\n    retrieved_note::{RETRIEVED_NOTE_OVERHEAD, RetrievedNote, unpack_retrieved_note},\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress, indexed_tagging_secret::IndexedTaggingSecret, traits::Packable,\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let NOTE_PCKD_LEN: u32, let M: u32, let MAX_NOTES: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; M],\n    _select_by_offsets: [u8; M],\n    _select_by_lengths: [u8; M],\n    _select_values: [Field; M],\n    _select_comparators: [u8; M],\n    _sort_by_indexes: [u8; M],\n    _sort_by_offsets: [u8; M],\n    _sort_by_lengths: [u8; M],\n    _sort_order: [u8; M],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    // This is always set to MAX_NOTES. We need to pass it to TS in order to correctly construct the BoundedVec\n    _max_notes: u32,\n    // This is always set to NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD. We need to pass it to TS in order to be able to\n    // correctly construct the BoundedVec there.\n    _packed_retrieved_note_length: u32,\n) -> BoundedVec<[Field; NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD], MAX_NOTES> {}\n\npub unconstrained fn get_notes<Note, let NOTE_PCKD_LEN: u32, let M: u32, let MAX_NOTES: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<NOTE_PCKD_LEN>,\n{\n    // N + 3 because of the contract address, nonce, and note_hash_counter that are stored out of the packed note.\n    let packed_retrieved_notes: BoundedVec<[Field; NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD], MAX_NOTES> = get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        MAX_NOTES,\n        NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD,\n    );\n\n    let mut notes = BoundedVec::<_, MAX_NOTES>::new();\n    for i in 0..packed_retrieved_notes.len() {\n        let retrieved_note = unpack_retrieved_note(packed_retrieved_notes.get(i));\n        notes.push(retrieved_note);\n    }\n\n    // At last we convert the bounded vector to an array of options. We do this because that is what the filter\n    // function needs to have on the output and we've decided to have the same type on the input and output of\n    // the filter and preprocessor functions.\n    //\n    // We have decided to have the same type on the input and output of the filter and preprocessor functions because\n    // it allows us to chain multiple filters and preprocessors together.\n    //\n    // So why do we want the array of options on the output of the filter function?\n    //\n    // Filter returns an array of options rather than a BoundedVec for performance reasons. Using an array of options\n    // allows setting values at known indices in the output array which is much more efficient than pushing to a\n    // BoundedVec where the write position depends on previous iterations. The array can then be efficiently converted\n    // to a BoundedVec using utils/array/collapse.nr::collapse function from Aztec.nr. This avoids expensive dynamic\n    // memory access patterns that would be required when building up a BoundedVec incrementally. For preprocessor\n    // functions we could use BoundedVec return value as there the optimization does not matter since it is applied in\n    // an unconstrained context. We, however, use the same return value type to be able to use the same function as\n    // both a preprocessor and a filter.\n    let mut notes_array = [Option::none(); MAX_NOTES];\n    for i in 0..notes.len() {\n        if i < notes.len() {\n            notes_array[i] = Option::some(notes.get_unchecked(i));\n        }\n    }\n\n    notes_array\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "150": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
      "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
    },
    "151": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "153": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "155": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\n// Map reserves a single storage slot regardless of what it stores because nothing is stored at said slot: it is only\n// used to derive the storage slots of nested state variables, which is expected to never result in collisions or slots\n// being close to one another due to these being hashes. This mirrors the strategy adopted by Solidity mappings.\nimpl<K, T, Context> Storage<1> for Map<K, T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "159": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/state_vars/private_mutable.nr",
      "source": "use dep::protocol_types::{\n    constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::poseidon2_hash_with_separator,\n    traits::Packable,\n};\n\nuse crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_note, view_notes},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateMutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nmod test;\n\n// Private storage slots are not really 'slots' but rather a value in the note hash preimage, so there is no notion of a\n// value spilling over multiple slots. For this reason PrivateMutable (and all other private state variables) needs just\n// one slot to be reserved, regardless of what it stores.\nimpl<T, Context> Storage<1> for PrivateMutable<T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateMutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateMutable>` type (for example), because the storage slot often also identifies an actor. e.g.\n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy.\n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\nimpl<Note> PrivateMutable<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash,\n{\n    // docs:start:initialize\n    pub fn initialize<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace<let N: u32>(self, new_note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        let (prev_retrieved_note, note_hash_for_read_request): (RetrievedNote<Note>, Field) =\n            get_note(self.context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note_unsafe(\n            self.context,\n            prev_retrieved_note,\n            note_hash_for_read_request,\n        );\n\n        // Add replacement note.\n        create_note(self.context, self.storage_slot, new_note)\n    }\n    // docs:end:replace\n\n    pub fn initialize_or_replace<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        // Safety: `check_nullifier_exists` is an unconstrained function - we can constrain a true value\n        // by providing an inclusion proof of the nullifier, but cannot constrain a false value since\n        // a non-inclusion proof would only be valid if done in public.\n        // Ultimately, this is not an issue given that we'll either:\n        //  - initialize the state variable, which would fail if it was already initialized due to the duplicate\n        //    nullifier, or\n        //  - replace the current value, which would fail if it was not initialized since we wouldn't be able\n        //    to produce an inclusion proof for the current note\n        // This means that an honest oracle will assist the prover to produce a valid proof, while a malicious\n        // oracle (i.e. one that returns an incorrect value for is_initialized) will simply fail to produce\n        // a proof.\n        let is_initialized =\n            unsafe { check_nullifier_exists(self.compute_initialization_nullifier()) };\n\n        if (!is_initialized) {\n            self.initialize(note)\n        } else {\n            self.replace(note)\n        }\n    }\n\n    // docs:start:get_note\n    pub fn get_note<let N: u32>(self) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        let mut (retrieved_note, note_hash_for_read_request) =\n            get_note(self.context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note_unsafe(self.context, retrieved_note, note_hash_for_read_request);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(self.context, self.storage_slot, retrieved_note.note)\n    }\n    // docs:end:get_note\n}\n\nimpl<Note> PrivateMutable<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    pub unconstrained fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n\n    // docs:start:view_note\n    pub unconstrained fn view_note<let N: u32>(self) -> Note\n    where\n        Note: Packable<N>,\n    {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: false,\n        };\n        let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2_1);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "163": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "164": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "166": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable.nr",
      "source": "use dep::protocol_types::{\n    shared_mutable::{\n        ScheduledDelayChange,\n        ScheduledValueChange,\n        shared_mutable_values::{unpack_delay_change, unpack_value_change},\n        SharedMutableValues,\n    },\n    traits::Packable,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\n\nmod test;\n\npub struct SharedMutable<T, let INITIAL_DELAY: u32, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\n// This will make the Aztec macros require that T implements the Packable and Eq traits, and allocate `M` storage\n// slots to this state variable.\nimpl<T, let INITIAL_DELAY: u32, Context, let M: u32> Storage<M> for SharedMutable<T, INITIAL_DELAY, Context>\nwhere\n    WithHash<SharedMutableValues<T, INITIAL_DELAY>, _>: Packable<M>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\n// SharedMutable<T> stores a value of type T that is:\n//  - publicly known (i.e. unencrypted)\n//  - mutable in public\n//  - readable in private with no contention (i.e. multiple parties can all read the same value without blocking one\n//    another nor needing to coordinate)\n// This is famously a hard problem to solve. SharedMutable makes it work by introducing a delay to public mutation:\n// the value is not changed immediately but rather a value change is scheduled to happen in the future after some delay\n// measured in blocks. Reads in private are only valid as long as they are included in a block not too far into the\n// future, so that they can guarantee the value will not have possibly changed by then (because of the delay).\n// The delay for changing a value is initially equal to INITIAL_DELAY, but can be changed by calling\n// `schedule_delay_change`.\nimpl<T, let INITIAL_DELAY: u32, Context> SharedMutable<T, INITIAL_DELAY, Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, &mut PublicContext>\nwhere\n    T: Eq,\n{\n\n    pub fn schedule_value_change<let N: u32>(self, new_value: T)\n    where\n        T: Packable<N>,\n    {\n        let _value_change = self.schedule_and_return_value_change(new_value);\n    }\n\n    pub fn schedule_and_return_value_change<let N: u32>(\n        self,\n        new_value: T,\n    ) -> ScheduledValueChange<T>\n    where\n        T: Packable<N>,\n    {\n        let mut value_change = self.read_value_change();\n        let delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n        let current_delay = delay_change.get_current(block_number);\n\n        // TODO: make this configurable\n        // https://github.com/AztecProtocol/aztec-packages/issues/5501\n        let block_of_change = block_number + current_delay;\n        value_change.schedule_change(new_value, block_number, current_delay, block_of_change);\n\n        self.write(value_change, delay_change);\n\n        value_change\n    }\n\n    pub fn schedule_delay_change<let N: u32>(self, new_delay: u32)\n    where\n        T: Packable<N>,\n    {\n        let mut delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n\n        delay_change.schedule_change(new_delay, block_number);\n\n        self.write(self.read_value_change(), delay_change);\n    }\n\n    pub fn get_current_value<let N: u32>(self) -> T\n    where\n        T: Packable<N>,\n    {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    pub fn get_current_delay<let N: u32>(self) -> u32\n    where\n        T: Packable<N>,\n    {\n        let block_number = self.context.block_number() as u32;\n        self.read_delay_change().get_current(block_number)\n    }\n\n    pub fn get_scheduled_value<let N: u32>(self) -> (T, u32)\n    where\n        T: Packable<N>,\n    {\n        self.read_value_change().get_scheduled()\n    }\n\n    pub fn get_scheduled_delay<let N: u32>(self) -> (u32, u32)\n    where\n        T: Packable<N>,\n    {\n        self.read_delay_change().get_scheduled()\n    }\n\n    fn read_value_change<let N: u32>(self) -> ScheduledValueChange<T>\n    where\n        T: Packable<N>,\n    {\n        // We don't read ScheduledValueChange directly by having it implement Packable because ScheduledValueChange\n        // and ScheduledDelayChange are packed together (sdc and svc.block_of_change are stored in the same slot).\n        let packed = self.context.storage_read(self.storage_slot);\n        unpack_value_change::<T, N>(packed)\n    }\n\n    fn read_delay_change<let N: u32>(self) -> ScheduledDelayChange<INITIAL_DELAY>\n    where\n        T: Packable<N>,\n    {\n        // Since all ScheduledDelayChange member are packed into a single field, we can read a single storage slot\n        // here and skip the ones that correspond to ScheduledValueChange members. We are abusing the fact that\n        // the field containing the ScheduledDelayChange data is the first one in the storage layout - otherwise we'd\n        // need to offset the storage slot to get the position where it'd land.\n        // We don't read ScheduledDelayChange directly by having it implement Packable because\n        // ScheduledValueChange and ScheduledDelayChange are packed together (sdc and svc.block_of_change are\n        // stored in the same slot).\n        let packed = self.context.storage_read(self.storage_slot);\n        unpack_delay_change::<INITIAL_DELAY>(packed)\n    }\n\n    fn write<let N: u32>(\n        self,\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>,\n    )\n    where\n        T: Packable<N>,\n    {\n        // Whenever we write to public storage, we write both the value change and delay change to storage at once.\n        // We do so by wrapping them in a single struct (`SharedMutableValues`). Then we wrap the resulting struct in\n        // `WithHash`.\n        // Wrapping in `WithHash` makes for more costly writes but it also makes private proofs much simpler because\n        // they only need to produce a historical proof for the hash, which results in a single inclusion proof (as\n        // opposed to 4 in the best case scenario in which T is a single field). Private shared mutable reads are\n        // assumed to be much more frequent than public writes, so this tradeoff makes sense.\n        let values = WithHash::new(SharedMutableValues::new(value_change, delay_change));\n\n        self.context.storage_write(self.storage_slot, values);\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, &mut PrivateContext>\nwhere\n    T: Eq,\n{\n    pub fn get_current_value<let N: u32>(self) -> T\n    where\n        T: Packable<N>,\n    {\n        // When reading the current value in private we construct a historical state proof for the public value.\n        // However, since this value might change, we must constrain the maximum transaction block number as this proof\n        // will only be valid for however many blocks we can ensure the value will not change, which will depend on the\n        // current delay and any scheduled delay changes.\n        let (value_change, delay_change, historical_block_number) =\n            self.historical_read_from_public_storage();\n\n        // We use the effective minimum delay as opposed to the current delay at the historical block as this one also\n        // takes into consideration any scheduled delay changes.\n        // For example, consider a scenario in which at block 200 the current delay was 50. We may naively think that\n        // the earliest we could change the value would be at block 251 by scheduling immediately after the historical\n        // block, i.e. at block 201. But if there was a delay change scheduled for block 210 to reduce the delay to 20\n        // blocks, then if a value change was scheduled at block 210 it would go into effect at block 230, which is\n        // earlier than what we'd expect if we only considered the current delay.\n        let effective_minimum_delay =\n            delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon =\n            value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // We prevent this transaction from being included in any block after the block horizon, ensuring that the\n        // historical public value matches the current one, since it can only change after the horizon.\n        self.context.set_tx_max_block_number(block_horizon);\n        value_change.get_current_at(historical_block_number)\n    }\n\n    fn historical_read_from_public_storage<let N: u32>(\n        self,\n    ) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>, u32)\n    where\n        T: Packable<N>,\n    {\n        let header = self.context.get_block_header();\n        let address = self.context.this_address();\n\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        let values: SharedMutableValues<T, INITIAL_DELAY> =\n            WithHash::historical_public_storage_read(header, address, self.storage_slot);\n\n        (values.svc, values.sdc, historical_block_number)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, UtilityContext>\nwhere\n    T: Eq,\n{\n    pub unconstrained fn get_current_value<let N: u32>(self) -> T\n    where\n        T: Packable<N>,\n    {\n        let smv: SharedMutableValues<T, INITIAL_DELAY> =\n            WithHash::utility_public_storage_read(self.context, self.storage_slot);\n\n        let block_number = self.context.block_number() as u32;\n        smv.svc.get_current_at(block_number)\n    }\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "178": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "181": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "182": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "184": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "185": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "187": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "189": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "190": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/random.nr",
      "source": "use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n"
    },
    "193": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "200": {
      "path": "/Users/karan.kurbur/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr",
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "217": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "25": {
      "path": "std/meta/expr.nr",
      "source": "//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n"
    },
    "262": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "277": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "279": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "280": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE,\n        GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__SILOED_NOTE_HASH,\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{arrays::array_concat, field::{field_from_bytes, field_from_bytes_32_trunc}},\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog::new(fields, private_log.inner.log.length)\n    }\n}\n\npub fn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(log: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS]) -> Field {\n    poseidon2_hash(log)\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "281": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr",
      "source": "use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n"
    },
    "290": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "294": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint =\n        quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_pack & typ.implements(packable_constraint)) {\n        // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n        let name_at_one_token = collapse_to_one_token(name);\n        let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n        // We add the individual fields to the fields array\n        let pack_method = get_trait_impl_method(\n            typ,\n            quote { crate::traits::Packable<$packed_len> },\n            quote { pack },\n        );\n        let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n        for i in 0..packed_len {\n            fields = fields.push_back(quote { $packed_struct_name[$i] });\n        }\n\n        // We add the new auxiliary variable to the aux_vars array\n        aux_vars = aux_vars.push_back(packed_struct);\n    } else if typ.is_field() {\n        // For field we just add the value to fields\n        fields = fields.push_back(name);\n    } else if typ.as_integer().is_some() | typ.is_bool() {\n        // For integer and bool we just cast to Field and add the value to fields\n        fields = fields.push_back(quote { $name as Field });\n    } else if typ.as_data_type().is_some() {\n        // For struct we pref\n        let nested_struct = typ.as_data_type().unwrap();\n        let params = nested_struct.0.fields(nested_struct.1);\n        let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n            let maybe_prefixed_name = if name == quote {} {\n                // Triggered when the param name is of a value available in the current scope (e.g. a function\n                // argument) --> then we don't prefix the name with anything.\n                param_name\n            } else {\n                // Triggered when we want to prefix the param name with the `name` from function input. This\n                // can typically be `self` when implementing a method on a struct.\n                quote { $name.$param_name }\n            };\n            generate_serialize_to_fields(quote {$maybe_prefixed_name}, param_type, should_pack)\n        });\n        let struct_flattened_fields = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n        );\n        let struct_flattened_aux_vars = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n        );\n        fields = fields.append(struct_flattened_fields);\n        aux_vars = aux_vars.append(struct_flattened_aux_vars);\n    } else if typ.as_array().is_some() {\n        // For array we recursively call `generate_serialize_to_fields(...)` for each element\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        for i in 0..array_len {\n            let (element_fields, element_aux_vars) =\n                generate_serialize_to_fields(quote { $name[$i] }, element_type, should_pack);\n            fields = fields.append(element_fields);\n            aux_vars = aux_vars.append(element_aux_vars);\n        }\n    } else if typ.as_str().is_some() {\n        // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n        // then we add each byte to fields as a Field\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let as_member = name.as_expr().unwrap().as_member_access();\n        let var_name = if as_member.is_some() {\n            as_member.unwrap().1\n        } else {\n            name\n        };\n        let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n        let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n        for i in 0..str_len {\n            fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n        }\n        aux_vars = aux_vars.push_back(as_bytes);\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            #[inline_always]\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            #[inline_always]\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "296": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "297": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "3": {
      "path": "std/array/mod.nr",
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n"
    },
    "307": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "311": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/shared_mutable/scheduled_delay_change.nr",
      "source": "use crate::traits::Empty;\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initially equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation\n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the\n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a\n// reduced delay, invalidating prior private reads.\npub struct ScheduledDelayChange<let INITIAL_DELAY: u32> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option,\n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pub(crate) pre: Option<u32>,\n    pub(crate) post: Option<u32>,\n    // Block at which `post` value is used instead of `pre`\n    pub(crate) block_of_change: u32,\n}\n\nimpl<let INITIAL_DELAY: u32> ScheduledDelayChange<INITIAL_DELAY> {\n    pub fn new(pre: Option<u32>, post: Option<u32>, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current block number - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub fn get_current(self, current_block_number: u32) -> u32 {\n        // The post value becomes the current one at the block of change, so any transaction that is included in the\n        // block of change will use the post value.\n        if current_block_number < self.block_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the block at which it will become the current\n    /// delay. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (u32, u32) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.block_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current block number. This function is only meaningful\n    /// when called in public with the current block number.\n    /// The block at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub fn schedule_change(&mut self, new: u32, current_block_number: u32) {\n        let current = self.get_current(current_block_number);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let blocks_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior constraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value block of change\n            //       block                 block of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   blocks until change               new delay            |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.block_of_change = current_block_number + blocks_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical block number. It only returns a meaningful value when called in private with historical blocks. This\n    /// function can be used alongside `ScheduledValueChange.get_block_horizon` to properly constrain the\n    /// `max_block_number` transaction property when reading mutable shared state.\n    /// This value typically equals the current delay at the block following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is\n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub fn get_effective_minimum_delay_at(self, historical_block_number: u32) -> u32 {\n        if self.block_of_change <= historical_block_number {\n            // If no delay changes were scheduled, then the delay value at the historical block (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // block of change the current delay will be the scheduled one, with an overall delay from the historical\n            // block number equal to the number of blocks until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //         block                  delay                  actual earliest value\n            //           v                block of change              block of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest block in            |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |         blocks                  new delay                      |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest block in\n            //                             which to scheduled value change\n            let blocks_until_change = self.block_of_change - (historical_block_number + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                blocks_until_change + self.post.unwrap_or(INITIAL_DELAY),\n            )\n        }\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Eq for ScheduledDelayChange<INITIAL_DELAY> {\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.block_of_change == other.block_of_change)\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Empty for ScheduledDelayChange<INITIAL_DELAY> {\n    fn empty() -> Self {\n        Self { pre: Option::none(), post: Option::none(), block_of_change: 0 }\n    }\n}\n"
    },
    "313": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/shared_mutable/scheduled_value_change.nr",
      "source": "use crate::traits::Empty;\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to represent a value that changes from `pre` to `post` at some block\n// called the `block_of_change`. The value can only be made to change by scheduling a change event at some future block\n// of change after some minimum delay measured in blocks has elapsed. This means that at any given block number we know\n// both the current value and the smallest block number at which the value might change - this is called the\n// 'block horizon'.\npub struct ScheduledValueChange<T> {\n    pub(crate) pre: T,\n    pub(crate) post: T,\n    // Block at which `post` value is used instead of `pre`\n    pub(crate) block_of_change: u32,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub fn new(pre: T, post: T, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given block. This function can be called both in public\n    /// (where `block_number` is simply the current block number, i.e. the number of the block in which the current\n    /// transaction will be included) and in private (where `block_number` is the historical block number that is used\n    /// to construct the proof).\n    /// Reading in private is only safe if the transaction's `max_block_number` property is set to a value lower or\n    /// equal to the block horizon (see `get_block_horizon()`).\n    pub fn get_current_at(self, block_number: u32) -> T {\n        // The post value becomes the current one at the block of change. This means different things in each realm:\n        // - in public, any transaction that is included in the block of change will use the post value\n        // - in private, any transaction that includes the block of change as part of the historical state will use the\n        //   post value (barring any follow-up changes)\n        if block_number < self.block_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the block at which it will become the current\n    /// value. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (T, u32) {\n        (self.post, self.block_of_change)\n    }\n\n    // Returns the previous value. This is the value that is current up until the block of change. Note that this value\n    // might not be the current anymore since block of change might have already passed.\n    pub fn get_previous(self) -> (T, u32) {\n        (self.pre, self.block_of_change)\n    }\n\n    /// Returns the largest block number at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_block_number`,\n    /// since due to its asynchronous nature private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum number of blocks that need to\n    /// elapse from the next block until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical block number is only safe to use\n    /// if the transaction's `max_block_number` property is set to a value lower or equal to the block horizon computed\n    /// using the same historical block number.\n    pub fn get_block_horizon(self, historical_block_number: u32, minimum_delay: u32) -> u32 {\n        // The block horizon is the very last block in which the current value is known. Any block past the horizon\n        // (i.e. with a block number larger than the block horizon) may have a different current value. Reading the\n        // current value in private typically requires constraining the maximum valid block number to be equal to the\n        // block horizon.\n        if historical_block_number >= self.block_of_change {\n            // Once the block of change has been mined, the current value (post) will not change unless a new value\n            // change is scheduled. This did not happen at the historical block number (or else it would not be\n            // greater or equal to the block of change), and therefore could only happen after the historical block\n            // number. The earliest would be the immediate next block, and so the smallest possible next block of change\n            // equals `historical_block_number + 1 + minimum_delay`. Our block horizon is simply the previous block to\n            // that one.\n            //\n            //      block of      historical\n            //       change         block            block horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n            historical_block_number + minimum_delay\n        } else {\n            // If the block of change has not yet been mined however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the block horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the block of change is in the past: the time horizon is the\n            //      block prior to the earliest one in which a new block of change might land.\n            //\n            //         historical\n            //           block                        block horizon      block of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` blocks away from the historical block number, in which case\n            //      the block of change would become the limiting factor for the time horizon, which would equal the\n            //      block right before the block of change (since by definition the value changes at the block of\n            //      change).\n            //\n            //           historical                         block horizon\n            //             block     block of change       if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the block of change to an arbitrary\n            // value, and therefore scenario a) is not currently possible. However implementing #5501 would allow for\n            // this to happen.\n            // Because historical_block_number < self.block_of_change, then block_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.block_of_change - 1,\n                historical_block_number + minimum_delay,\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current block number. This function is only meaningful when\n    /// called in public with the current block number.\n    pub fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_block_number: u32,\n        minimum_delay: u32,\n        block_of_change: u32,\n    ) {\n        assert(block_of_change >= current_block_number + minimum_delay);\n\n        self.pre = self.get_current_at(current_block_number);\n        self.post = new_value;\n        self.block_of_change = block_of_change;\n    }\n}\n\nimpl<T> Eq for ScheduledValueChange<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.block_of_change == other.block_of_change)\n    }\n}\n\nimpl<T> Empty for ScheduledValueChange<T>\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        Self { pre: T::empty(), post: T::empty(), block_of_change: 0 }\n    }\n}\n"
    },
    "315": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/shared_mutable/shared_mutable_values.nr",
      "source": "use crate::{\n    hash::poseidon2_hash,\n    shared_mutable::{\n        scheduled_delay_change::ScheduledDelayChange, scheduled_value_change::ScheduledValueChange,\n    },\n    traits::{Hash, Packable},\n    utils::arrays,\n};\nuse std::meta::derive;\n\nmod test;\n\n/// SharedMutableValues is just a wrapper around ScheduledValueChange and ScheduledDelayChange that then allows us\n/// to wrap both of these values in WithHash. WithHash allows for efficient read of values in private.\n///\n/// Note that the WithHash optimization does not work in public (due to there being no unconstrained). But we also want\n/// to be able to read the values efficiently in public and we want to be able to read each value separately. Reading\n/// the values separately is tricky because ScheduledValueChange and ScheduledDelayChange are packed together (sdc and\n/// svc.block_of_change are stored in the same slot). For that reason we expose `unpack_value_change` and\n/// `unpack_delay_change` functions that can be used to extract the values from the packed representation. This\n/// is \"hacky\" but there is no way around it.\n#[derive(Eq)]\npub struct SharedMutableValues<T, let INITIAL_DELAY: u32> {\n    pub svc: ScheduledValueChange<T>,\n    pub sdc: ScheduledDelayChange<INITIAL_DELAY>,\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutableValues<T, INITIAL_DELAY> {\n    pub fn new(svc: ScheduledValueChange<T>, sdc: ScheduledDelayChange<INITIAL_DELAY>) -> Self {\n        SharedMutableValues { svc, sdc }\n    }\n}\n\npub fn unpack_value_change<T, let N: u32>(packed: [Field; 2 * N + 1]) -> ScheduledValueChange<T>\nwhere\n    T: Packable<N>,\n{\n    let svc_pre_packed = arrays::subarray(packed, 1);\n    let svc_post_packed = arrays::subarray(packed, N + 1);\n    ScheduledValueChange::new(\n        T::unpack(svc_pre_packed),\n        T::unpack(svc_post_packed),\n        packed[0] as u32,\n    )\n}\n\npub fn unpack_delay_change<let INITIAL_DELAY: u32>(\n    packed: Field,\n) -> ScheduledDelayChange<INITIAL_DELAY> {\n    // This function expects to be called with just the first field of the packed representation, which contains sdc\n    // and svc block_of_change. We'll discard the svc component.\n    let svc_block_of_change = packed as u32;\n\n    let mut tmp = (packed - svc_block_of_change as Field) / TWO_POW_32;\n    let sdc_block_of_change = tmp as u32;\n\n    tmp = (tmp - sdc_block_of_change as Field) / TWO_POW_32;\n    let sdc_post_is_some = tmp as bool;\n\n    tmp = (tmp - sdc_post_is_some as Field) / TWO_POW_8;\n    let sdc_post_inner = tmp as u32;\n\n    tmp = (tmp - sdc_post_inner as Field) / TWO_POW_32;\n    let sdc_pre_is_some = tmp as bool;\n\n    tmp = (tmp - sdc_pre_is_some as Field) / TWO_POW_8;\n    let sdc_pre_inner = tmp as u32;\n\n    ScheduledDelayChange {\n        pre: if sdc_pre_is_some {\n            Option::some(sdc_pre_inner)\n        } else {\n            Option::none()\n        },\n        post: if sdc_post_is_some {\n            Option::some(sdc_post_inner)\n        } else {\n            Option::none()\n        },\n        block_of_change: sdc_block_of_change,\n    }\n}\n\nglobal TWO_POW_32: Field = 2.pow_32(32);\nglobal TWO_POW_8: Field = 2.pow_32(8);\n\n// We pack to `2 * N + 1` fields because ScheduledValueChange contains T twice (hence `2 * N`) and we need one extra\n// field to store ScheduledDelayChange and the block_of_change of ScheduledValueChange.\nimpl<T, let INITIAL_DELAY: u32, let N: u32> Packable<2 * N + 1> for SharedMutableValues<T, INITIAL_DELAY>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; 2 * N + 1] {\n        let mut result = [0; 2 * N + 1];\n\n        // We pack sdc.pre, sdc.post, sdc.block_of_change and svc.block_of_change into a single field as follows:\n        // [ sdc.pre_inner: u32 | sdc.pre_is_some: u8 | sdc.post_inner: u32 | sdc.post_is_some: u8 | sdc.block_of_change: u32 | svc.block_of_change: u32 ]\n        result[0] = self.svc.block_of_change as Field\n            + ((self.sdc.block_of_change as Field) * 2.pow_32(32))\n            + ((self.sdc.post.is_some() as Field) * 2.pow_32(64))\n            + ((self.sdc.post.unwrap_unchecked() as Field) * 2.pow_32(72))\n            + ((self.sdc.pre.is_some() as Field) * 2.pow_32(104))\n            + ((self.sdc.pre.unwrap_unchecked() as Field) * 2.pow_32(112));\n\n        // Pack the pre and post values from ScheduledValueChange\n        let svc_pre_packed = self.svc.pre.pack();\n        let svc_post_packed = self.svc.post.pack();\n        for i in 0..N {\n            result[i + 1] = svc_pre_packed[i];\n            result[i + 1 + N] = svc_post_packed[i];\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; 2 * N + 1]) -> Self {\n        let svc = unpack_value_change::<T, N>(fields);\n        let sdc = unpack_delay_change::<INITIAL_DELAY>(fields[0]);\n        Self::new(svc, sdc)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32, let N: u32> Hash for SharedMutableValues<T, INITIAL_DELAY>\nwhere\n    T: Packable<N>,\n{\n    fn hash(self) -> Field {\n        poseidon2_hash(self.pack())\n    }\n}\n"
    },
    "318": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "336": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "337": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "353": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    get_split_order_hints::{get_split_order_hints_asc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::sort_by_counter_asc;\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\n// Returns the number of consecutive elements at the start of the array for which the predicate returns false.\n// This function ensures that any element after the first matching element (predicate returns true) also matches the predicate.\npub fn array_length_until<T, let N: u32, Env>(array: [T; N], predicate: fn[Env](T) -> bool) -> u32 {\n    let mut length = 0;\n    let mut stop = false;\n    for i in 0..N {\n        if predicate(array[i]) {\n            stop = true;\n        } else {\n            assert(\n                stop == false,\n                \"matching element found after already encountering a non-matching element\",\n            );\n            length += 1;\n        }\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n// Helper function to check if an array is padded with a given value from a given index.\n// Different to padded_array_length in that it allows the elements before the given index to be the same as the padded value.\npub fn array_padded_with<T, let N: u32>(array: [T; N], from_index: u32, padded_with: T) -> bool\nwhere\n    T: Eq,\n{\n    let mut is_valid = true;\n    let mut should_check = false;\n    for i in 0..N {\n        should_check |= i == from_index;\n        is_valid &= !should_check | (array[i] == padded_with);\n    }\n    is_valid\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn test_array_length_until() {\n    let array = [11, 22, 33, 44, 55];\n    assert_eq(array_length_until(array, |x| x == 55), 4);\n    assert_eq(array_length_until(array, |x| x == 56), 5);\n    assert_eq(array_length_until(array, |x| x > 40), 3);\n    assert_eq(array_length_until(array, |x| x > 10), 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_non_consecutive_fails() {\n    let array = [1, 1, 0, 1, 0];\n    let _ = array_length_until(array, |x| x == 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_first_non_matching_fails() {\n    let array = [1, 0, 0, 0, 0];\n    let _ = array_length_until(array, |x| x == 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test]\nfn test_array_padded_with() {\n    let array = [11, 22, 33, 44, 44];\n    assert_eq(array_padded_with(array, 0, 44), false);\n    assert_eq(array_padded_with(array, 1, 44), false);\n    assert_eq(array_padded_with(array, 2, 44), false);\n    assert_eq(array_padded_with(array, 3, 44), true);\n    assert_eq(array_padded_with(array, 4, 44), true);\n    assert_eq(array_padded_with(array, 4, 33), false);\n    assert_eq(array_padded_with(array, 5, 44), true); // Index out of bounds.\n    assert_eq(array_padded_with(array, 0, 11), false);\n}\n"
    },
    "354": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "356": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "366": {
      "path": "/Users/karan.kurbur/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "5": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "50": {
      "path": "/Users/karan.kurbur/Desktop/zk-ctf/contracts/src/main.nr",
      "source": "use dep::aztec::macros::aztec;\n\n#[aztec]\npub contract CTF {\n    use aztec::{\n        macros::{functions::{private, public, view}, storage::{storage}},\n        messages::logs::note::encode_and_encrypt_note};\n\n    use dep::aztec:: macros::{\n        functions::{internal}, \n    };\n    use dep::aztec::prelude::{AztecAddress, Map, SharedMutable, PublicImmutable, PublicMutable, PrivateMutable};\n    use aztec::{\n        macros::notes::note,\n        protocol_types::{traits::{Deserialize, Serialize}},\n    };\n    use aztec::protocol_types::traits::Packable;\n\n    use aztec::{\n        macros::{events::event}\n    };\n\n    use aztec::oracle::random::{random};   // returns a Field\n\n    #[storage]\n    struct Storage<Context> {\n        start: PublicImmutable<u32, Context>,\n        end: PublicImmutable<u32, Context>,\n        join_fee: PublicImmutable<Field, Context>,\n        challenge_fee: PublicImmutable<Field, Context>,\n        slash_fee: PublicImmutable<Field, Context>,\n        deposit_size: PublicImmutable<Field, Context>,\n        is_init: PublicMutable<bool, Context>,\n        num_players: PublicMutable<u32, Context>,\n        deposits: Map<AztecAddress, PublicMutable<Field, Context>, Context>,\n        challenger: Map<AztecAddress, PublicMutable<AztecAddress, Context>, Context>,\n        challenge_block: Map<AztecAddress, SharedMutable<u32, 1, Context>, Context>,\n        \n        final_score: Map<AztecAddress, SharedMutable<u32, 1, Context>, Context>,\n        game_over: SharedMutable<bool, 1, Context>,\n        winner: SharedMutable<AztecAddress, 1, Context>,\n        winner_score: SharedMutable<u32, 1, Context>,\n        \n        first_capture: SharedMutable<bool, 1, Context>,\n        \n        capture_note: Map<AztecAddress, PrivateMutable<CaptureNote, Context>, Context>,\n        tally_note: Map<AztecAddress, PrivateMutable<TallyNote, Context>, Context>,\n    }\n\n    #[derive(Eq, Serialize, Deserialize, Packable)]\n    struct Challenge {\n        challenger: AztecAddress,\n        block: u32,\n    }\n\n    #[note]\n    #[derive(Eq, Serialize, Deserialize)]\n    pub struct CaptureNote {\n        owner: AztecAddress,\n        // 0 indicates the player does not have the flag\n        capture_block: u32,\n        randomness: Field\n    }\n\n    impl CaptureNote {\n        pub fn new(owner: AztecAddress, capture_block: u32) -> Self {\n            // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n            // so a malicious sender could use non-random values to make the note less private. But they already know\n            // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n            // information. We can therefore assume that the sender will cooperate in the random value generation.\n            let randomness: Field = unsafe { random() };\n            CaptureNote { owner, capture_block, randomness }\n        }\n    }\n\n    #[note]\n    #[derive(Eq, Serialize, Deserialize)]\n    pub struct TallyNote {\n        owner: AztecAddress,\n        tally: u32,\n        randomness: Field\n\n    }\n\n    impl TallyNote {\n        pub fn new(owner: AztecAddress, tally: u32) -> Self {\n            // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n            // so a malicious sender could use non-random values to make the note less private. But they already know\n            // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n            // information. We can therefore assume that the sender will cooperate in the random value generation.\n            let randomness: Field = unsafe { random() };\n\n            TallyNote { owner, tally , randomness}\n        }\n    }\n\n    // Define an event structure\n    #[event]\n    #[derive(Eq, Serialize, Deserialize)]\n    struct ChallengeEvent {\n        challenger: AztecAddress,\n        defender: AztecAddress,\n        block: Field\n    }\n\n    // #[initializer]\n    #[public]\n    fn initialize(\n        start: u32, \n        end: u32,\n        join_fee: Field,\n        challenge_fee: Field,\n        slash_fee: Field,\n        deposit_size: Field,\n    ) {\n        storage.start.initialize(start);\n        storage.end.initialize(end);\n        storage.join_fee.initialize(join_fee);\n        storage.challenge_fee.initialize(challenge_fee);\n        storage.slash_fee.initialize(slash_fee);\n        storage.deposit_size.initialize(deposit_size);\n        storage.num_players.write(0);\n        \n    }\n\n    #[private]\n    fn join(want_flag: bool, block_number: u32) {\n        if(want_flag) {\n            let capture_note = CaptureNote::new(context.msg_sender(), block_number);\n            let tally_note = TallyNote::new(context.msg_sender(), 0);\n            storage.capture_note.at(context.msg_sender()).initialize_or_replace(capture_note).emit(encode_and_encrypt_note(\n                &mut context,\n                context.msg_sender(),\n                context.msg_sender(),\n            ));\n            storage.tally_note.at(context.msg_sender()).initialize_or_replace(tally_note).emit(encode_and_encrypt_note(\n                &mut context,\n                context.msg_sender(),\n                context.msg_sender(),\n            ));\n        } else {\n            let capture_note = CaptureNote::new(context.msg_sender(), 0);\n            let tally_note = TallyNote::new(context.msg_sender(), 0);\n            storage.capture_note.at(context.msg_sender()).initialize_or_replace(capture_note).emit(encode_and_encrypt_note(\n                &mut context,\n                context.msg_sender(),\n                context.msg_sender(),\n            ));\n            storage.tally_note.at(context.msg_sender()).initialize_or_replace(tally_note).emit(encode_and_encrypt_note(\n                &mut context,\n                context.msg_sender(),\n                context.msg_sender(),\n            ));\n        }\n\n    }\n\n    #[private]\n    fn has_flag() -> bool {\n        let note = storage.capture_note.at(context.msg_sender()).get_note();\n        note.note.capture_block != 0\n    }\n\n    #[public]\n    fn end_game() {\n        let current_block = context.block_number() as u32;\n        // You can now use current_block for your logic\n        if current_block > storage.end.read() {\n            storage.game_over.schedule_value_change(true);\n        }\n    }\n\n    #[public]\n    fn winner() -> AztecAddress {\n        let mut winner = AztecAddress::zero();\n        let current_block = context.block_number() as u32;\n        if current_block > storage.end.read() {\n            winner = storage.winner.get_current_value();\n        }\n\n        winner \n    }\n\n    #[private]\n    fn submit_score() {\n        let score: TallyNote = storage.tally_note.at(context.msg_sender()).get_note().note;\n        CTF::at(context.this_address())\n            ._submit_score(context.msg_sender(), score.tally)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _submit_score(sender: AztecAddress, score: u32) {\n        let (gameOver, _) = storage.game_over.get_scheduled_value();\n\n        if(gameOver) {\n            storage.final_score.at(sender).schedule_value_change(score);\n            let (winner_score, _) = storage.winner_score.get_scheduled_value();\n            if(winner_score < score) {\n                storage.winner_score.schedule_value_change(score);\n                storage.winner.schedule_value_change(sender);\n            }\n        }\n    }\n\n    #[private]\n    fn tally() -> u32 {\n        let note = storage.tally_note.at(context.msg_sender()).get_note();\n        note.note.tally\n    }\n\n    #[public]\n    fn challenge(address: AztecAddress) {\n        // Ensure the game is initialized\n        if !storage.is_init.read() {}\n        let challenger = storage.challenger.at(address).read();\n    \n        // Abort if someone has already written to this key\n        assert(challenger == AztecAddress::zero(), \"Challenge already exists for this address\");\n\n        let challenger = context.msg_sender();\n\n        context.emit_public_log(\n            ChallengeEvent { challenger: challenger, defender: address, block: context.block_number() }        );\n\n        storage.challenger.at(address).write(context.msg_sender());\n        storage.challenge_block.at(address).schedule_value_change(context.block_number() as u32);\n    }\n\n    #[public]\n    fn slash(address: AztecAddress) {\n        let challenger = storage.challenger.at(address).read();\n    \n        // Abort if someone has already written to this key\n        assert(challenger == context.msg_sender(), \"You are not the challenger for this address\");\n    }\n\n    #[private]\n    fn respond(challenger: AztecAddress) {\n        let responder_slot = storage.capture_note.at(context.msg_sender());\n        let capture_note = responder_slot.get_note().note;\n        let challenge_block = storage.challenge_block.at(context.msg_sender()).get_current_value();\n\n        let tally_slot = storage.tally_note.at(context.msg_sender());\n        let tally_note = tally_slot.get_note().note;\n        let mut new_tally_note = TallyNote::new(context.msg_sender(), tally_note.tally);\n        let mut new_capture_note = capture_note;\n        let randomness: Field = unsafe { random() };\n        let mut challenger_capture_note = CaptureNote {\n            owner: challenger,\n            capture_block: 0,\n            randomness\n        };\n\n        // If they have captured before and its a succesful capture by the challenger, update the tally\n        if capture_note.capture_block != 0 {\n            new_tally_note.tally = new_tally_note.tally + challenge_block - capture_note.capture_block;\n            new_capture_note = CaptureNote::new(context.msg_sender(), 0);\n            challenger_capture_note = CaptureNote {\n                owner: challenger,\n                capture_block: challenge_block,\n                randomness\n            };\n        }\n\n        // Emit the tally note\n        tally_slot.initialize_or_replace(new_tally_note).emit(encode_and_encrypt_note(\n            &mut context,\n            context.msg_sender(),\n            context.msg_sender(),\n        ));\n\n        // Relinquish the flag\n        responder_slot.initialize_or_replace(new_capture_note).emit(encode_and_encrypt_note(\n            &mut context,\n            context.msg_sender(),\n            context.msg_sender(),\n        ));\n\n        // emit the note to the challenger\n        let challenger_slot = storage.capture_note.at(challenger);\n        challenger_slot.initialize_or_replace(challenger_capture_note).emit(encode_and_encrypt_note(\n            &mut context,\n            challenger,\n            context.msg_sender(),\n        ));\n\n        // Publically ack the challenge\n        CTF::at(context.this_address())\n            ._respond(context.msg_sender())\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _respond(sender: AztecAddress) {\n        storage.challenger.at(sender).write(AztecAddress::zero());\n        storage.challenge_block.at(sender).schedule_value_change(0);\n    }\n\n    #[public]\n    fn nothing() {\n    }\n}\n"
    },
    "51": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "52": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// UtilityCallInterface\n\npub struct UtilityCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let N: u32, T> UtilityCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\n// UtilityVoidCallInterface\n\npub struct UtilityVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n}\n\nimpl<let N: u32> UtilityVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: () }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n"
    },
    "59": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::{PrivateLog, PrivateLogData},\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<Counted<LogHash>, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS], length: u32) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        length: u32,\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "60": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "62": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "66": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "78": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "81": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr",
      "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n"
    },
    "82": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr",
      "source": "use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n"
    },
    "83": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "87": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_private_state` utility function.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_private_state = generate_sync_private_state();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_private_state\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_private_state() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[$utility]\n        unconstrained fn sync_private_state() {\n        }\n    }\n}\n"
    },
    "88": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "95": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n\n    fn_abi\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "97": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "98": {
      "path": "/Users/karan.kurbur/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract should have this macro (or `storage_no_init`) applied to it, and the\n/// struct has to be called 'Storage'.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    let struct_name = s.name();\n    if struct_name != quote { Storage } {\n        panic(\n            f\"The #[storage] macro can only be applied to a struct with name 'Storage', got '{struct_name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage_no_init\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot });\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract can have this macro (or storage_no_init) applied to it, and the struct\n/// has to be called 'Storage'.\npub comptime fn storage_no_init(s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n\n    // We do need to make sure that the type is called Storage, since we'll do `Storage::init` later on.\n\n    if s.name() != quote { Storage } {\n        let name = s.name();\n        panic(\n            f\"The #[storage_no_init] macro can only be applied to a struct with name 'Storage', got '{name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(typ: Type, slot: Quoted) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    let constructor = if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot });\n\n        quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }\n    } else {\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        quote { $struct_name::new(context, $slot)}\n    };\n\n    (constructor, get_storage_size(typ))\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    }
  }
}
